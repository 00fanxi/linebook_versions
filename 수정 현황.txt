1. 노드 생성시 디비 linebook/connectdata/ 에 같은 이름의 콜렉션 생성

2.연결 저장시 디비 해당 콜렉션에 James 저장.



일단 연결된 반대 포트 삭제를 막는것을 최우선으로 하자.


CDF_E1 단자 생성 기능 완성!


기존 data 저장 방식

1.노드 생성시 같은 이름의 page 정보를 넣을 파일 하나와 연결정보를 저장할 파일 하나를 각각 data와 connectdata
디렉토리 밑에 생성한다.

2.연결관리에 들어가서 현재노드의 연결정보를 자동으로 불러와 log_file(hidden input)에 넣고, 이를 기반으로
라인을 형상화 시켜서 연결시킨다.

3.연결관리에서 새로운 연결을 진행하거나, 기존 연결을 해제하면 upload_log_filed에서 RegExp로 해당 연결정보를
찾아 삭제하거나 새연결정보를 생성한다.

4.연결 진행이 끝난후 저장(submit)을 진행하면 upload_log_file의 값을 request에 담아 서버에 전달한다.

5.현재노드의 연결정보 관리파일의 내용을 해당 값으로 업데이트 한다.


DB를 사용한 새로운 저장 방식 디자인

1. 노드 생성시 connectdata DB밑에 같은 이름의 collection 생성

2. 포트 생성시 해당 collection 밑에 포트 정보를 만든다.

포트 정보 DOC 설계

{
1._id : (각각 포트에 영구적이고 고유한 id를 부여)
2.sharenum : (동시에 생성된 케이블을 공유하는 2개의 포트에 같은 sharenum을 부여)
3.portname : (사용자가 지정한 포트 이름. 같은 노드안에서 같은 반대노드로 가는 포트는 같은 이름을 못가진다.)
4.thisnode : (생성될 포트가 속한 노드)
5.oppnode : (생성될 포트의 반대 노드)
6.portnumber : (포트의 총 단자 수)
7.porttype : (포트의 종류 ex)CDF_E1,IDF...)
8.rxtx : (rxtx구성. CDF_E1의 경우만 생성)
9.cabletype : (실단자 광단자를 구분)
10.usingport : (한개가 연결된 단자) [1,2,3,4...]
11.bridgedport : (두개 이상이 연결된 단자) [1,2,3,4...]
12.disabledport : (불량포트) [1,2,3,4...]
13.availableport : (사용가능한 포트) [1,2,3,4...]
14.reference : (비고) {1:"3509",2:"RX",...}
15.usage : (용도) {1:'정통중대상황실',2:'포8중대행정관',.....}
16.connectstat : (모든 단자의 연결 상태 및 반대편 정보까지 담는다. 이 데이터로 10~13을 생성)
                 {1:[{sharenum : 1, portclass : 2, oppnode : '시험실', portname : '1~100'},...]
                  2:[],......
                 }
17.latestupdate : (최근 업데이트 일자)

}
